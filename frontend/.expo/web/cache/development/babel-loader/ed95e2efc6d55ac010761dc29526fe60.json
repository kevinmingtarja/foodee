{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getItem, setItem } from \"./storage\";\nvar ACCESS_TOKEN_KEY = \"access\";\nvar USERNAME_KEY = \"username\";\nexport var getToken = function getToken() {\n  var _await$Promise$all, _await$Promise$all2, token;\n\n  return _regeneratorRuntime.async(function getToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([getItem(ACCESS_TOKEN_KEY)]));\n\n        case 2:\n          _await$Promise$all = _context.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 1);\n          token = _await$Promise$all2[0];\n\n          if (token) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 7:\n          return _context.abrupt(\"return\", token);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUsername = function getUsername() {\n  var _await$Promise$all3, _await$Promise$all4, username;\n\n  return _regeneratorRuntime.async(function getUsername$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([getItem(USERNAME_KEY)]));\n\n        case 2:\n          _await$Promise$all3 = _context2.sent;\n          _await$Promise$all4 = _slicedToArray(_await$Promise$all3, 1);\n          username = _await$Promise$all4[0];\n\n          if (username) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 7:\n          return _context2.abrupt(\"return\", username);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveToken = function saveToken(token) {\n  return Promise.all([setItem(ACCESS_TOKEN_KEY, token)]);\n};\nexport var saveUsername = function saveUsername(username) {\n  return Promise.all([setItem(USERNAME_KEY, username)]);\n};","map":{"version":3,"sources":["C:/Users/Radian/Documents/Code/foodee/frontend/src/utils/auth.ts"],"names":["getItem","setItem","ACCESS_TOKEN_KEY","USERNAME_KEY","getToken","Promise","all","token","getUsername","username","saveToken","saveUsername"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,OAAlB;AAEA,IAAMC,gBAAgB,GAAG,QAAzB;AACA,IAAMC,YAAY,GAAG,UAArB;AAGA,OAAO,IAAMC,QAAsC,GAAG,SAAzCA,QAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC5BC,OAAO,CAACC,GAAR,CAAY,CAACN,OAAO,CAACE,gBAAD,CAAR,CAAZ,CAD4B;;AAAA;AAAA;AAAA;AAC3CK,UAAAA,KAD2C;;AAAA,cAE7CA,KAF6C;AAAA;AAAA;AAAA;;AAAA,2CAE/B,IAF+B;;AAAA;AAAA,2CAG3CA,KAH2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/C;AAMP,OAAO,IAAMC,WAAyC,GAAG,SAA5CA,WAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC5BH,OAAO,CAACC,GAAR,CAAY,CAACN,OAAO,CAACG,YAAD,CAAR,CAAZ,CAD4B;;AAAA;AAAA;AAAA;AAC9CM,UAAAA,QAD8C;;AAAA,cAEhDA,QAFgD;AAAA;AAAA;AAAA;;AAAA,4CAE/B,IAF+B;;AAAA;AAAA,4CAG9CA,QAH8C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlD;AAMP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACH,KAAD;AAAA,SACrBF,OAAO,CAACC,GAAR,CAAY,CAACL,OAAO,CAACC,gBAAD,EAAmBK,KAAnB,CAAR,CAAZ,CADqB;AAAA,CAAlB;AAGP,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACF,QAAD;AAAA,SACxBJ,OAAO,CAACC,GAAR,CAAY,CAACL,OAAO,CAACE,YAAD,EAAeM,QAAf,CAAR,CAAZ,CADwB;AAAA,CAArB","sourcesContent":["import { getItem, setItem, removeItem } from \"@utils/storage\";\r\n\r\nconst ACCESS_TOKEN_KEY = \"access\";\r\nconst USERNAME_KEY = \"username\";\r\n\r\n\r\nexport const getToken: () => Promise<string | null> = async () => {\r\n    const [token] = await Promise.all([getItem(ACCESS_TOKEN_KEY)]);\r\n    if (!token) return null;\r\n    return token;\r\n};\r\n\r\nexport const getUsername: () => Promise<string | null> = async () => {\r\n    const [username] = await Promise.all([getItem(USERNAME_KEY)]);\r\n    if (!username) return null;\r\n    return username;\r\n};\r\n\r\nexport const saveToken = (token: string) =>\r\n    Promise.all([setItem(ACCESS_TOKEN_KEY, token)]);\r\n\r\nexport const saveUsername = (username: string) =>\r\n    Promise.all([setItem(USERNAME_KEY, username)]);\r\n"]},"metadata":{},"sourceType":"module"}