{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Radian\\\\Documents\\\\Code\\\\foodee\\\\frontend\\\\src\\\\components\\\\Button\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ThemeContext } from \"../Theme\";\nvar width = Dimensions.get(\"window\").width;\nexport var Button = function Button(_ref) {\n  var style = _ref.style,\n      color = _ref.color,\n      onPress = _ref.onPress,\n      type = _ref.type,\n      size = _ref.size,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"color\", \"onPress\", \"type\", \"size\", \"children\"]);\n\n  var theme = useContext(ThemeContext);\n  var btnSize = size === \"large\" ? width / 1.3 : width / 3;\n  var btnBgColor = type === \"filled\" ? theme.colors.primary : \"transparent\";\n  var btnTextColor = type === \"filled\" ? theme.colors.foreground : theme.colors.primary;\n  var border = type === \"outlined\" && {\n    borderColor: theme.colors.primary,\n    borderWidth: 2\n  };\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: _objectSpread(_objectSpread({\n      paddingVertical: 14,\n      borderRadius: 8,\n      backgroundColor: btnBgColor,\n      width: btnSize\n    }, border), style),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, React.createElement(RNText, {\n    style: {\n      color: btnTextColor,\n      fontSize: 16,\n      textAlign: \"center\",\n      fontFamily: \"PoppinsBold\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, children)));\n};","map":{"version":3,"sources":["C:/Users/Radian/Documents/Code/foodee/frontend/src/components/Button/index.tsx"],"names":["React","useContext","ThemeContext","width","Dimensions","get","Button","style","color","onPress","type","size","children","rest","theme","btnSize","btnBgColor","colors","primary","btnTextColor","foreground","border","borderColor","borderWidth","paddingVertical","borderRadius","backgroundColor","fontSize","textAlign","fontFamily"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;AAYA,SACIC,YADJ;AAiBA,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAAvC;AAEA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,OAQU;AAAA,MAP5BC,KAO4B,QAP5BA,KAO4B;AAAA,MAN5BC,KAM4B,QAN5BA,KAM4B;AAAA,MAL5BC,OAK4B,QAL5BA,OAK4B;AAAA,MAJ5BC,IAI4B,QAJ5BA,IAI4B;AAAA,MAH5BC,IAG4B,QAH5BA,IAG4B;AAAA,MAF5BC,QAE4B,QAF5BA,QAE4B;AAAA,MADzBC,IACyB;;AAC5B,MAAMC,KAAK,GAAGb,UAAU,CAACC,YAAD,CAAxB;AAEA,MAAMa,OAAO,GAAGJ,IAAI,KAAK,OAAT,GAAmBR,KAAK,GAAG,GAA3B,GAAiCA,KAAK,GAAG,CAAzD;AAEA,MAAMa,UAAU,GAAGN,IAAI,KAAK,QAAT,GAAoBI,KAAK,CAACG,MAAN,CAAaC,OAAjC,GAA2C,aAA9D;AACA,MAAMC,YAAY,GACdT,IAAI,KAAK,QAAT,GAAoBI,KAAK,CAACG,MAAN,CAAaG,UAAjC,GAA8CN,KAAK,CAACG,MAAN,CAAaC,OAD/D;AAGA,MAAMG,MAAM,GAAGX,IAAI,KAAK,UAAT,IAAuB;AAClCY,IAAAA,WAAW,EAAER,KAAK,CAACG,MAAN,CAAaC,OADQ;AAElCK,IAAAA,WAAW,EAAE;AAFqB,GAAtC;AAKA,SACI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEd,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AACI,IAAA,KAAK;AAEGe,MAAAA,eAAe,EAAE,EAFpB;AAGGC,MAAAA,YAAY,EAAE,CAHjB;AAIGC,MAAAA,eAAe,EAAEV,UAJpB;AAKGb,MAAAA,KAAK,EAAEY;AALV,OAMMM,MANN,GAOMd,KAPN,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEW,YADJ;AAEHQ,MAAAA,QAAQ,EAAE,EAFP;AAGHC,MAAAA,SAAS,EAAE,QAHR;AAIHC,MAAAA,UAAU,EAAE;AAJT,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKjB,QARL,CAZJ,CADJ,CADJ;AA2BH,CAjDM","sourcesContent":["import React, { useContext } from \"react\";\r\nimport {\r\n    View,\r\n    Text as RNText,\r\n    TouchableOpacity,\r\n    Dimensions,\r\n    Image,\r\n    ViewStyle,\r\n    ImageSourcePropType,\r\n    TextStyle,\r\n} from \"react-native\";\r\n\r\nimport {\r\n    ThemeContext,\r\n    themeType,\r\n    colorsType,\r\n    spacingsType,\r\n    textVariantsType,\r\n} from \"../Theme\";\r\n\r\nexport interface ButtonProps {\r\n    style: React.CSSProperties;\r\n    color?: colorsType;\r\n    onPress: () => void;\r\n    type: \"filled\" | \"outlined\";\r\n    size: \"small\" | \"large\";\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst width = Dimensions.get(\"window\").width;\r\n\r\nexport const Button = ({\r\n    style,\r\n    color,\r\n    onPress,\r\n    type,\r\n    size,\r\n    children,\r\n    ...rest\r\n}: ButtonProps): JSX.Element => {\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const btnSize = size === \"large\" ? width / 1.3 : width / 3;\r\n\r\n    const btnBgColor = type === \"filled\" ? theme.colors.primary : \"transparent\";\r\n    const btnTextColor =\r\n        type === \"filled\" ? theme.colors.foreground : theme.colors.primary;\r\n\r\n    const border = type === \"outlined\" && {\r\n        borderColor: theme.colors.primary,\r\n        borderWidth: 2,\r\n    };\r\n\r\n    return (\r\n        <TouchableOpacity onPress={onPress}>\r\n            <View\r\n                style={\r\n                    {\r\n                        paddingVertical: 14,\r\n                        borderRadius: 8,\r\n                        backgroundColor: btnBgColor,\r\n                        width: btnSize,\r\n                        ...border,\r\n                        ...style,\r\n                    } as ViewStyle\r\n                }\r\n            >\r\n                <RNText\r\n                    style={{\r\n                        color: btnTextColor,\r\n                        fontSize: 16,\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"PoppinsBold\",\r\n                    }}\r\n                >\r\n                    {children}\r\n                </RNText>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}