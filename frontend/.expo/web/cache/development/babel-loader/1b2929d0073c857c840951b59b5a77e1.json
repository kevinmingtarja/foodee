{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Radian\\\\Documents\\\\Code\\\\foodee\\\\frontend\\\\src\\\\components\\\\Components.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ThemeContext } from \"./Theme\";\nexport var Box = function Box(_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      padding = _ref.padding,\n      margin = _ref.margin,\n      backgroundColor = _ref.backgroundColor,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"children\", \"padding\", \"margin\", \"backgroundColor\"]);\n\n  var theme = useContext(ThemeContext);\n  return React.createElement(View, _extends({\n    style: _objectSpread({\n      margin: margin ? theme.spacing[margin] : 0,\n      padding: padding ? theme.spacing[padding] : 0,\n      backgroundColor: theme.colors[backgroundColor]\n    }, style)\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), children);\n};\nexport var Text = function Text(_ref2) {\n  var children = _ref2.children,\n      style = _ref2.style,\n      variant = _ref2.variant,\n      color = _ref2.color,\n      rest = _objectWithoutProperties(_ref2, [\"children\", \"style\", \"variant\", \"color\"]);\n\n  var theme = useContext(ThemeContext);\n  return React.createElement(RNText, _extends({\n    style: _objectSpread(_objectSpread({\n      color: theme.colors[color]\n    }, theme.textVariants[variant]), style)\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), children);\n};\nvar width = Dimensions.get(\"window\").width;\nexport var Button = function Button(_ref3) {\n  var style = _ref3.style,\n      color = _ref3.color,\n      onPress = _ref3.onPress,\n      type = _ref3.type,\n      size = _ref3.size,\n      children = _ref3.children,\n      rest = _objectWithoutProperties(_ref3, [\"style\", \"color\", \"onPress\", \"type\", \"size\", \"children\"]);\n\n  var theme = useContext(ThemeContext);\n  var btnSize = size === \"large\" ? width / 1.3 : width / 3;\n  var btnBgColor = type === \"filled\" ? theme.colors.primary : \"transparent\";\n  var btnTextColor = type === \"filled\" ? theme.colors.foreground : theme.colors.primary;\n  var border = type === \"outlined\" && {\n    borderColor: theme.colors.primary,\n    borderWidth: 2\n  };\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: _objectSpread(_objectSpread({\n      paddingVertical: 14,\n      borderRadius: 8,\n      backgroundColor: btnBgColor,\n      width: btnSize\n    }, border), style),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, React.createElement(RNText, {\n    style: {\n      color: btnTextColor,\n      fontSize: 16,\n      textAlign: \"center\",\n      fontFamily: \"PoppinsBold\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, children)));\n};\nexport var Card = function Card(_ref4) {\n  var style = _ref4.style,\n      color = _ref4.color,\n      image = _ref4.image,\n      onPress = _ref4.onPress,\n      children = _ref4.children,\n      body = _ref4.body,\n      imgHeight = _ref4.imgHeight,\n      rest = _objectWithoutProperties(_ref4, [\"style\", \"color\", \"image\", \"onPress\", \"children\", \"body\", \"imgHeight\"]);\n\n  var theme = useContext(ThemeContext);\n\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    style: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: 0.75 * width,\n      height: 0.3 * height,\n      backgroundColor: \"white\",\n      shadowRadius: 5,\n      shadowOpacity: 0.2,\n      shadowColor: \"#757575\",\n      shadowOffset: {\n        width: 0,\n        height: 3\n      },\n      elevation: 5,\n      borderRadius: 12.5,\n      marginVertical: 40,\n      paddingTop: height * 0.01,\n      paddingHorizontal: width * 0.015\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, React.createElement(Box, {\n    backgroundColor: \"background\",\n    style: {\n      width: \"100%\",\n      height: \"75%\",\n      borderRadius: 10,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginBottom: 7.5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: image,\n    style: {\n      width: width,\n      height: imgHeight,\n      resizeMode: \"contain\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  })), React.createElement(Text, {\n    variant: \"h1\",\n    color: \"primaryText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, children), React.createElement(Text, {\n    variant: \"body\",\n    color: \"primaryText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, body));\n};","map":{"version":3,"sources":["C:/Users/Radian/Documents/Code/foodee/frontend/src/components/Components.tsx"],"names":["React","useContext","ThemeContext","Box","style","children","padding","margin","backgroundColor","rest","theme","spacing","colors","Text","variant","color","textVariants","width","Dimensions","get","Button","onPress","type","size","btnSize","btnBgColor","primary","btnTextColor","foreground","border","borderColor","borderWidth","paddingVertical","borderRadius","fontSize","textAlign","fontFamily","Card","image","body","imgHeight","height","justifyContent","alignItems","shadowRadius","shadowOpacity","shadowColor","shadowOffset","elevation","marginVertical","paddingTop","paddingHorizontal","marginBottom","resizeMode"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\nimport {\r\n    View,\r\n    Text as RNText,\r\n    TouchableOpacity,\r\n    Dimensions,\r\n    Image,\r\n    ViewStyle,\r\n    ImageSourcePropType,\r\n    TextStyle,\r\n} from \"react-native\";\r\n\r\nimport {\r\n    ThemeContext,\r\n    themeType,\r\n    colorsType,\r\n    spacingsType,\r\n    textVariantsType,\r\n} from \"./Theme\";\r\n\r\nexport interface BoxProps {\r\n    /** CSS Styles */\r\n    style: React.CSSProperties;\r\n    padding?: spacingsType;\r\n    children: React.ReactNode;\r\n    margin?: spacingsType;\r\n    backgroundColor: colorsType;\r\n    rest?: string[];\r\n}\r\n\r\nexport const Box = ({\r\n    style,\r\n    children,\r\n    padding, // Default Arguments\r\n    margin,\r\n    backgroundColor,\r\n    ...rest\r\n}: BoxProps): JSX.Element => {\r\n    const theme = useContext(ThemeContext);\r\n\r\n    return (\r\n        <View\r\n            style={\r\n                {\r\n                    margin: margin ? theme.spacing[margin] : 0,\r\n                    padding: padding ? theme.spacing[padding] : 0,\r\n                    backgroundColor: theme.colors[backgroundColor],\r\n                    ...style,\r\n                } as ViewStyle\r\n            }\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport interface TextProps {\r\n    children: React.ReactNode;\r\n    style?: TextStyle;\r\n    variant: textVariantsType;\r\n    color: colorsType;\r\n    rest?: string[];\r\n}\r\n\r\nexport const Text = ({\r\n    children,\r\n    style,\r\n    variant,\r\n    color,\r\n    ...rest\r\n}: TextProps): JSX.Element => {\r\n    const theme = useContext(ThemeContext);\r\n\r\n    return (\r\n        <RNText\r\n            style={\r\n                {\r\n                    color: theme.colors[color],\r\n                    ...theme.textVariants[variant],\r\n                    ...style,\r\n                } as ViewStyle\r\n            }\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </RNText>\r\n    );\r\n};\r\n\r\nexport interface ButtonProps {\r\n    style: React.CSSProperties;\r\n    color?: colorsType;\r\n    onPress: () => void;\r\n    type: \"filled\" | \"outlined\";\r\n    size: \"small\" | \"large\";\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst width = Dimensions.get(\"window\").width;\r\n\r\nexport const Button = ({\r\n    style,\r\n    color,\r\n    onPress,\r\n    type,\r\n    size,\r\n    children,\r\n    ...rest\r\n}: ButtonProps): JSX.Element => {\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const btnSize = size === \"large\" ? width / 1.3 : width / 3;\r\n\r\n    const btnBgColor = type === \"filled\" ? theme.colors.primary : \"transparent\";\r\n    const btnTextColor =\r\n        type === \"filled\" ? theme.colors.foreground : theme.colors.primary;\r\n\r\n    const border = type === \"outlined\" && {\r\n        borderColor: theme.colors.primary,\r\n        borderWidth: 2,\r\n    };\r\n\r\n    return (\r\n        <TouchableOpacity onPress={onPress}>\r\n            <View\r\n                style={\r\n                    {\r\n                        paddingVertical: 14,\r\n                        borderRadius: 8,\r\n                        backgroundColor: btnBgColor,\r\n                        width: btnSize,\r\n                        ...border,\r\n                        ...style,\r\n                    } as ViewStyle\r\n                }\r\n            >\r\n                <RNText\r\n                    style={{\r\n                        color: btnTextColor,\r\n                        fontSize: 16,\r\n                        textAlign: \"center\",\r\n                        fontFamily: \"PoppinsBold\",\r\n                    }}\r\n                >\r\n                    {children}\r\n                </RNText>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n\r\nexport interface Card {\r\n    style?: React.CSSProperties;\r\n    color?: colorsType;\r\n    image: ImageSourcePropType;\r\n    onPress: () => void;\r\n    children: React.ReactNode;\r\n    body?: string;\r\n    imgHeight: number;\r\n    rest?: string[];\r\n}\r\n\r\nexport const Card = ({\r\n    style,\r\n    color,\r\n    image,\r\n    onPress,\r\n    children,\r\n    body,\r\n    imgHeight,\r\n    ...rest\r\n}: Card): JSX.Element => {\r\n    const theme = useContext(ThemeContext);\r\n    const { width, height } = Dimensions.get(\"window\");\r\n\r\n    return (\r\n        <TouchableOpacity\r\n            onPress={onPress}\r\n            style={{\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                width: 0.75 * width,\r\n                height: 0.3 * height,\r\n                backgroundColor: \"white\",\r\n                shadowRadius: 5,\r\n                shadowOpacity: 0.2,\r\n                shadowColor: \"#757575\",\r\n                shadowOffset: {\r\n                    width: 0,\r\n                    height: 3,\r\n                },\r\n                elevation: 5,\r\n                borderRadius: 12.5,\r\n                marginVertical: 40,\r\n                paddingTop: height * 0.01,\r\n                paddingHorizontal: width * 0.015,\r\n            }}\r\n        >\r\n            <Box\r\n                backgroundColor=\"background\"\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"75%\",\r\n                    borderRadius: 10,\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    marginBottom: 7.5,\r\n                }}\r\n            >\r\n                <Image\r\n                    source={image}\r\n                    style={{\r\n                        width: width,\r\n                        height: imgHeight,\r\n                        resizeMode: \"contain\",\r\n                    }}\r\n                />\r\n            </Box>\r\n            <Text variant=\"h1\" color=\"primaryText\">\r\n                {children}\r\n            </Text>\r\n            <Text variant=\"body\" color=\"primaryText\">\r\n                {body}\r\n            </Text>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}